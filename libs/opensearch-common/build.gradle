/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.opensearch.gradle.info.BuildParams

apply plugin: 'opensearch.build'
apply plugin: 'opensearch.publish'
// changes for module plugin

java {
  modularity.inferModulePath.set(false)
}
apply plugin: 'org.javamodularity.moduleplugin'
configurations {
  modulePath {
    transitive false
  }
}
dependencies {
  // logging
  api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  api "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  api 'com.carrotsearch:hppc:0.8.1'
  api "org.apache.lucene:lucene-suggest:${versions.lucene}"
  api "org.apache.lucene:lucene-core:${versions.lucene}"
  api "joda-time:joda-time:${versions.joda}"

  api project(':libs:opensearch-core')
  api project(':libs:opensearch-x-content')
  modulePath project(":libs:opensearch-cli")
  modulePath project(":libs:opensearch-geo")

  testImplementation(project(":test:framework")) {
    exclude group: 'org.opensearch', module: 'opensearch-geo'
  }
}
//compileJava.moduleOptions.compileModuleInfoSeparately = true
//compileModuleInfoJava.sourceCompatibility = 11
//compileModuleInfoJava.targetCompatibility = 11

//apply plugin: 'org.javamodularity.moduleplugin'

//
//compileJava.moduleOptions.compileModuleInfoSeparately = true
//compileModuleInfoJava.sourceCompatibility = 11
//compileModuleInfoJava.targetCompatibility = 11
//modularity.patchModule("opensearch.common", "opensearch-x-content-2.0.0-SNAPSHOT.jar")

//compileModuleInfoJava.doFirst {
//  //options.compilerArgs -= ['--module-path', project.configurations.compileClasspath.asPath]
//  options.compilerArgs += [
//    '-Xmaxerrs', '10',
//    '-Xmaxwarns', '1',
//    '-cp', project.configurations.compileClasspath.asPath,
//    '--add-modules', 'ALL-SYSTEM',
//    //'--module-path', sourceSets.main.compileClasspath.asPath,
//    //'--patch-module',"opensearch.common=opensearch-x-content-2.0.0-SNAPSHOT.jar",
//    //'--add-reads', "opensearch.common=ALL-UNNAMED"
//  ]
//
//  //forbiddenApisJava11Test.enabled = false
//  //println sourceSets.java11Test.compileClasspath.asPath
//  println compileModuleInfoJava.options.compilerArgs
//}

//compileModuleInfoJava.doFirst {
//  //options.compilerArgs -= ['--module-path', project.configurations.compileClasspath.asPath]
//  options.compilerArgs += [
//    '-Xmaxerrs', '10',
//    '-Xmaxwarns', '1',
//    '-cp', project.configurations.compileClasspath.asPath,
//    '--add-modules', 'ALL-SYSTEM',
//    //'--module-path', sourceSets.main.compileClasspath.asPath,
//    //'--patch-module',"opensearch.common=opensearch-x-content-2.0.0-SNAPSHOT.jar",
//    //'--add-reads', "opensearch.common=ALL-UNNAMED"
//  ]
//
//  //forbiddenApisJava11Test.enabled = false
//  //println sourceSets.java11Test.compileClasspath.asPath
//  println compileModuleInfoJava.options.compilerArgs
//}
compileJava.doFirst {
  //options.compilerArgs -= ['--module-path', project.configurations.compileClasspath.asPath]
  options.compilerArgs += [
    //'-Xmaxerrs', '10',
    '-Xmaxwarns', '1',
    '-cp', project.configurations.compileClasspath.asPath,
    '--add-modules', 'ALL-SYSTEM',
    '--module-path', configurations.modulePath.asPath,
    //'--patch-module',"opensearch.common=opensearch-x-content-2.0.0-SNAPSHOT.jar",
    '--add-reads', "opensearch.common=ALL-UNNAMED"
  ]

  //forbiddenApisJava11Test.enabled = false
  //println sourceSets.java11Test.compileClasspath.asPath
  println compileJava.options.compilerArgs
}
//jar.manifest.attributes("Add-Opens:": "opensearch.common/org.opensearch.common")

//sourceSets {
//  java11Test {
//    java {
//      srcDirs = ['src/main/java']
//    }
//  }
//}
//
////
//compileJava11TestJava {
//  sourceCompatibility = 11
//  targetCompatibility = 11
//}
//
//configurations {
//  java11TestCompile.extendsFrom(compile)
//}
//compileJava11TestJava.dependsOn compileModuleInfoJava
//
//
//// classpath is same as main sourceset class path, whereas module path is derived from
//// modulePath configuration.
//compileJava11TestJava.doFirst {
//
//  //java {
//    //modularity.inferModulePath.set(true)
//  //}
//  //options.compilerArgs -= ["--module-path", sourceSets.main.compileClasspath.asPath]
//  //sourceSets.java11Test.compileClasspath = sourceSets.main.compileClasspath
//  //sourceSets.main.compileClasspath -= configurations.patchModules1
//  println project.configurations.compileClasspath.asPath
//  options.compilerArgs += [
//    '-Xmaxerrs', '10',
//    '-Xmaxwarns', '1',
//    '-cp', project.configurations.compileClasspath.asPath,
//    '--add-modules', 'ALL-SYSTEM',
//    //'--module-path', sourceSets.main.compileClasspath.asPath,
//    //'--patch-module',"opensearch.common=opensearch-x-content-2.0.0-SNAPSHOT.jar",
//    '--add-reads', "opensearch.common=ALL-UNNAMED"
//  ]
//
//  forbiddenApisJava11Test.enabled = false
//  //println sourceSets.java11Test.compileClasspath.asPath
//  println compileJava11TestJava.options.compilerArgs
//}

// #RF - enable them back
javadoc.enabled = false
thirdPartyAudit.enabled = false
dependencyLicenses.enabled = false
missingJavadoc.enabled = false
testingConventions.enabled = false

tasks.named('forbiddenApisMain').configure {
  // geo does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to core
  replaceSignatureFiles 'jdk-signatures'
}

